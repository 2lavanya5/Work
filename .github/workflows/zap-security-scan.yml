name: OWASP ZAP Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install Python dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install gunicorn

      # Step 4: Start Flask application
      - name: Start Flask App
        run: |
          echo "Starting Flask application..."
          nohup gunicorn --bind 0.0.0.0:5000 --access-logfile gunicorn.log --error-logfile flask.log app:app > /dev/null 2>&1 &
          
          echo "Waiting for app to start..."
          timeout 60 bash -c '
            while ! curl -s http://127.0.0.1:5000; do
              sleep 2
              echo "Waiting for app..."
            done'

      # Step 5: Debug Flask logs (optional, for troubleshooting)
      - name: Debug Flask Logs
        run: |
          echo "----- Flask Log -----"
          cat flask.log
          echo "----- Gunicorn Log -----"
          cat gunicorn.log

      # Step 6: Run OWASP ZAP Scan using Docker
      - name: Run ZAP Scan with Docker
        run: |
          echo "Running OWASP ZAP Scan..."
          docker run -v $(pwd):/zap/wrk -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://127.0.0.1:5000 \
            -r zap_report.html

      # Step 7: Upload ZAP scan report and logs as artifacts
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            zap_report.html
            flask.log
            gunicorn.log
